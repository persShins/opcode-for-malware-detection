import torch
import numpy as np
from base import BaseSklearnTrainer, BaseTrainer
from sklearn.model_selection import train_test_split
from utils import inf_loop, MetricTracker

class SklearnTrainer(BaseSklearnTrainer):
    """ Trainer class for sklearn """
    def __init__(self, model, metric_ftns, config, dataset):
        super().__init__(model, metric_ftns, config)
        self.config = config
        
        self.X, self.Y = dataset['embed_passage'], dataset['label']
        self.X_train, self.X_val, self.y_train, self.y_val = train_test_split(self.X, self.Y, test_size=0.1, stratify=self.Y)
        
    @classmethod
    def from_dataloader(cls, model, metric_ftns, config, data_loader):
        dataset = data_loader.dataset.embed_passage
        return cls(model, metric_ftns, config, dataset)
        
    def train(self):
        """ Train logic for a session """
        self.writer.sklearn.autolog()
        
        try:
            self.model.fit(self.X_train, self.y_train)
            self.logger.info("Train model using splited dataset.")
            
            y_pred = self.model.predict(self.X_val)
            self.evaluation(self.y_val, y_pred)
        except:
            self.logger.warning("Warning: A problem occurred during the training phase.")
    
    def evaluation(self, y_eval, y_pred):
        for metric_ftn in self.metric_ftns:
            ftn_name = metric_ftn.__name__
            score = metric_ftn(y_eval, y_pred)
            self.logger.info("{} : {}".format(ftn_name, score))
            self.writer.log_metric(ftn_name, score)


class Trainer(BaseTrainer):
    """ Trainer class """
    def __init__(self, model, criterion, metric_ftns, optimizer, config, device,
                 data_loader, valid_data_loader=None, lr_scheduler=None, len_epoch=None):
        super().__init__(model, criterion, metric_ftns, optimizer, config)
        self.config = config
        self.device = device
        self.data_loader = data_loader
        if len_epoch is None:
            # epoch-based training
            self.len_epoch = len(self.data_loader)
        else:
            # iteration-based training
            self.data_loader = inf_loop(data_loader)
            self.len_epoch = len_epoch
        self.valid_data_loader = valid_data_loader
        self.do_validation = self.valid_data_loader is not None
        self.lr_scheduler = lr_scheduler
        self.log_step = int(np.sqrt(data_loader.batch_size))

        self.train_metrics = MetricTracker('loss', *[m.__name__ for m in self.metric_ftns], writer=self.writer)
        self.valid_metrics = MetricTracker('loss', *[m.__name__ for m in self.metric_ftns], writer=self.writer)

    def _train_epoch(self, epoch):
        """ train logic for an epoch """

        self.model.train()
        self.train_metrics.reset()
        for batch_idx, data in enumerate(self.data_loader):
            inputs, target = data['embed_passage'].to(self.device), data['label'].to(self.device)

            output = self.model(inputs)
            loss = self.criterion(output, target)
            
            self.optimizer.zero_grad()
            loss.backward()
            self.optimizer.step()

            self.train_metrics.update('loss', loss.item(), is_metric=True, epoch=epoch)
            for met in self.metric_ftns:
                with torch.no_grad():
                    pred = torch.argmax(output, dim=-1)
                    self.train_metrics.update(met.__name__, met(pred, target), is_metric=True)

            if batch_idx % self.log_step == 0:
                self.logger.debug('Train Epoch: {} {} Loss: {:.6f}'.format(
                    epoch,
                    self._progress(batch_idx),
                    loss.item()))

            if batch_idx == self.len_epoch:
                break
        log = self.train_metrics.result()

        if self.do_validation:
            val_log = self._valid_epoch(epoch)
            log.update(**{'val_'+k : v for k, v in val_log.items()})

        if self.lr_scheduler is not None:
            self.lr_scheduler.step()
        return log

    def _valid_epoch(self, epoch):
        """ Validate after training an epoch """
        
        self.model.eval()
        self.valid_metrics.reset()
        with torch.no_grad():
            for batch_idx, data in enumerate(self.valid_data_loader):
                inputs, target = data['embed_passage'].to(self.device), data['label'].to(self.device)

                output = self.model(inputs)
                loss = self.criterion(output, target)

                self.valid_metrics.update('loss', loss.item(), is_metric=True)
                for met in self.metric_ftns:
                    with torch.no_grad():
                        pred = torch.argmax(output, dim=-1)
                        self.valid_metrics.update(met.__name__, met(pred, target), is_metric=True)

        return self.valid_metrics.result()

    def _progress(self, batch_idx):
        base = '[{}/{} ({:.0f}%)]'
        if hasattr(self.data_loader, 'n_samples'):
            current = batch_idx * self.data_loader.batch_size
            total = self.data_loader.n_samples
        else:
            current = batch_idx
            total = self.len_epoch
        return base.format(current, total, 100.0 * current / total)