from base import BaseSklearnTrainer
from sklearn.model_selection import train_test_split

class SklearnTrainer(BaseSklearnTrainer):
    """ Trainer class for sklearn """
    def __init__(self, model, metric_ftns, config, dataset):
        super().__init__(model, metric_ftns, config)
        self.config = config
        
        self.X, self.Y = dataset['embed_passage'], dataset['label']
        self.X_train, self.X_val, self.y_train, self.y_val = train_test_split(self.X, self.Y, test_size=0.1, stratify=self.Y)
        
    @classmethod
    def from_dataloader(cls, model, metric_ftns, config, data_loader):
        dataset = data_loader.dataset.embed_passage
        return cls(model, metric_ftns, config, dataset)
        
    def train(self):
        """ Train logic for a session """
        self.writer.sklearn.autolog()
        
        try:
            self.model.fit(self.X_train, self.y_train)
            self.logger.info("Train model using splited dataset.")
            
            y_pred = self.model.predict(self.X_val)
            self.evaluation(self.y_val, y_pred)
        except:
            self.logger.warning("Warning: A problem occurred during the training phase.")
    
    def evaluation(self, y_eval, y_pred):
        for metric_ftn in self.metric_ftns:
            ftn_name = metric_ftn.__name__
            score = metric_ftn(y_eval, y_pred)
            self.logger.info("{} : {}".format(ftn_name, score))
            self.writer.log_metric(ftn_name, score)

    