import pytest
import shutil
import argparse
import collections
import model.model as module_arch
from pathlib import Path
from data_loader.data_loaders import MalwareDetectionDataLoader
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score
from trainer import SklearnTrainer
from parse_config import ConfigParser


@pytest.fixture(params=[1, 2, 3, 4])
def setup_dataloader(request, setup_logger):
    logger = setup_logger
    save_dir = Path('tests/passage')
    if save_dir.exists():
        shutil.rmtree(save_dir)
    save_dir.mkdir(parents=True, exist_ok=True)
    
    logger.info('')
    logger.info("n_gram parameter : {}".format(request.param))
    data_loader = MalwareDetectionDataLoader(
        metadata_path='tests/test.csv',
        data_dir='data/dataset/unziped',
        save_dir='tests/passage',
        n_gram=request.param,
        validation_split=0.1,
        batch_size=4,
        logger=logger,
    )
    return data_loader


class TestMalwareDetectionSklearnModel:
    def test_training(self, setup_logger , setup_dataloader):
        logger = setup_logger
        
        data_loader = setup_dataloader
        train_dataset = data_loader.dataset.embed_passage
        assert data_loader.dataset.embed_passage is not None, "dataset load error."
        logger.info("load dataset.")
        
        model = module_arch.SVMClassificationModel()
        logger.info(model)
        assert model is not None, "model load error."
        
        X, Y = train_dataset['embed_passage'], train_dataset['label']
        X_train, X_val, y_train, y_val = train_test_split(X, Y, test_size=0.1, stratify=Y)        
        assert all([
            X_train is not None,
            X_val is not None,
            y_train is not None,
            y_val is not None,
        ]), "data split error"
        logger.info("split dataset.")
        
        try:
            model.fit(X_train, y_train)
            logger.info("Train model using splited dataset.")
            
            # metrics using accuracy_score
            y_pred = model.predict(X_val)
            logger.info("accuracy_score : {}".format(accuracy_score(y_val, y_pred)))
            logger.info("f1_score : {}".format(f1_score(y_val, y_pred)))
        except:
            logger.warning("A problem occurred during the training phase.")

        
        
        
        
    