import pytest
import shutil
import logging.config
from pathlib import Path
from data_loader.data_loaders import MalwareDetectionDataset
from data_loader.data_loaders import MalwareDetectionDataLoader


@pytest.fixture()
def setup_dataset(setup_logger):
    logger = setup_logger
    save_dir = Path('tests/passage')
    if save_dir.exists():
        shutil.rmtree(save_dir)
    
    save_dir.mkdir(parents=True, exist_ok=True)
    
    ds = MalwareDetectionDataset(
        metadata_path='tests/test.csv',
        data_dir='data/dataset/unziped',
        logger=logger,
        num_workers=1,
        save_dir=save_dir
    )
    return ds

class TestMalwareDetectionDataset:
    """ Test for MalwareDetectionDataset """
    def test_initialization(self, setup_dataset):
        """ dataset initialization check """
        ds = setup_dataset
        assert ds is not None, "Dataset instance error."
        
    def test_make_passage(self, setup_dataset):
        """ passage check """
        ds = setup_dataset
        assert ds.passage is not None, "passage load error."
        
    def test_make_embed(self, setup_dataset):
        """ embed check """
        ds = setup_dataset
        assert ds.embed is not None, "embed load error."
    
    def test_reload_object(self, setup_logger):
        """ object reload check """
        logger = setup_logger
        save_dir = 'tests/passage'
        ds = MalwareDetectionDataset(
            metadata_path='tests/test.csv',
            data_dir='data/dataset/unziped',
            logger=logger,
            num_workers=1,
            save_dir=save_dir
        )
        assert ds.passage is not None, "passage reload error."
        assert ds.embed is not None, "embed reload error."

    def test_getitem(self, setup_dataset):
        ds = setup_dataset
        
        for idx in range(len(ds)):
            assert len(ds[idx]) > 0, "getitem error (query to sparse vector)"
            print("idx {} sparse vector : {}".format(idx, ds[idx]))
            
        
class TestMalwareDetectionDataLoader:
    def test_dataloader(self, setup_logger):
        logger = setup_logger
        data_loader = MalwareDetectionDataLoader(
            metadata_path='tests/test.csv',
            data_dir='data/dataset/unziped',
            save_dir='tests/passage',
            batch_size=4,
            logger=logger,
            validation_split=0.1
        )
        
        assert data_loader.sampler is not None, 'train sampling error.'
        assert data_loader.valid_sampler is not None, 'validation sampling error.'