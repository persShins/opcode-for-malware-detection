import argparse
import model.model as module_arch
import model.metric as module_metric
import data_loader.data_loaders as module_data
from parse_config import ConfigParser
from trainer import SklearnTrainer


def main(config):
    logger = config.get_logger('train')
    data_loader = config.init_obj('data_loader', module_data, logger=logger)
    
    model = config.init_obj('arch', module_arch)
    logger.info(model)
    
    metrics = [getattr(module_metric, met) for met in config['metrics']]
    
    if str(model).startswith('sklearn') is True:
        train_dataset = data_loader.dataset.embed_passage
        trainer = SklearnTrainer(
            model=model,
            metric_ftns=metrics,
            config=config,
            dataset=train_dataset
        )
        trainer.train()
    else:
        # TODO: trainer for torch 제작
        pass
    return


if __name__ == '__main__':
    args = argparse.ArgumentParser(description='Malware Detection')
    args.add_argument('-c', '--config', default='config.yaml', type=str,
                      help='config file path (default: None)')
    args.add_argument('-r', '--resume', default=None, type=str,
                      help='path to latest checkpoint (default: None)')
    args.add_argument('-d', '--device', default=None, type=str,
                      help='indices of GPUs to enable (default: all)')
    
    config = ConfigParser.from_args(args)
    main(config)