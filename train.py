import torch
import argparse
import model.model as module_arch
import model.metric as module_metric
import model.loss as module_loss
import data_loader.data_loaders as module_data
from utils import prepare_device
from parse_config import ConfigParser
from trainer import SklearnTrainer, Trainer


def main(config):
    logger = config.get_logger('train')
    data_loader = config.init_obj('data_loader', module_data, logger=logger)
    
    model = config.init_obj('arch', module_arch)
    logger.info(model)
    
    metrics = [getattr(module_metric, met) for met in config['metrics']]
    print("metric로 {} 을 사용합니다.".format([ftn.__name__ for ftn in metrics]))
    
    if str(model).startswith('sklearn') is True:    # for scikit-learn
        train_dataset = data_loader.dataset.embed_passage
        trainer = SklearnTrainer(
            model=model,
            metric_ftns=metrics,
            config=config,
            dataset=train_dataset
        )
        trainer.train()
    else:   # for pytorch
        valid_data_loader = data_loader.split_validation()
        
        device, device_ids = prepare_device(config['n_gpu'])
        model = model.to(device)
        if len(device_ids) > 1:
            model = torch.nn.DataParallel(model, device_ids=device_ids)
            
        criterion = getattr(module_loss, config['loss'])
        print(f"criterion으로 {criterion.__name__}을 사용합니다.")
        
        # build optimizer, learning rate scheduler. delete every lines containing lr_scheduler for disabling scheduler
        trainable_params = filter(lambda p: p.requires_grad, model.parameters())
        optimizer = config.init_obj('optimizer', torch.optim, trainable_params)
        lr_scheduler = config.init_obj('lr_scheduler', torch.optim.lr_scheduler, optimizer)
        
        trainer = Trainer(
            model=model,
            criterion=criterion,
            metric_ftns=metrics,
            optimizer=optimizer,
            config=config,
            device=device,
            data_loader=data_loader,
            valid_data_loader=valid_data_loader,
            lr_scheduler=lr_scheduler
        )
        trainer.train()
    return


if __name__ == '__main__':
    args = argparse.ArgumentParser(description='Malware Detection')
    args.add_argument('-c', '--config', default='config.yaml', type=str,
                      help='config file path (default: None)')
    args.add_argument('-r', '--resume', default=None, type=str,
                      help='path to latest checkpoint (default: None)')
    args.add_argument('-d', '--device', default=None, type=str,
                      help='indices of GPUs to enable (default: all)')
    
    config = ConfigParser.from_args(args)
    main(config)