import os
import torch
import pickle as pkl
from abc import abstractmethod
from numpy import inf
from logger import MLflowWriter


class BaseSklearnTrainer:
    """
    Base classs for all sklearn-trainers
    """
    def __init__(self, model, metric_ftns, config):
        self.config = config
        self.logger = config.get_logger('trainer', config['trainer']['verbosity'])
        
        self.model = model
        self.metric_ftns = metric_ftns
        
        cfg_trainer = config['trainer']
        mlflow_dir = cfg_trainer['mlflow_dir']
        
        self.monitor = cfg_trainer.get('monitor', 'off')

        # configuration to monitor model performance and save best.
        if self.monitor == 'off':
            self.mnt_mode = 'off'
            self.mnt_best = 0
        else:
            self.mnt_mode, self.mnt_metric = self.monitor
            assert self.mnt_mode in ['min', 'max'], "config.yaml에서 trainer.monitor 값은 'min' 또는 'max'이어야 합니다."

            self.mnt_best = inf if self.mnt_mode == 'min' else -inf
            self.early_stop = cfg_trainer.get('early_stop', inf)
            if self.early_stop <= 0:
                self.early_stop = inf
        
        self.checkpoint_dir = config.save_dir
        
        # setup visualization writer instance
        self.writer = MLflowWriter(
            exper_name=config.exper_name,
            run_id=config.run_id,
            logger=self.logger,
            mlflow_dir=mlflow_dir
        )
        
    @abstractmethod
    def train(self):
        """ Full training logic for scikit-learn """
        raise NotImplementedError
    
    def _save_checkpoint(self) -> None:
        """ 
        description:
            모델을 저장합니다.
        """
        filename = str(self.checkpoint_dir / 'checkpoint-ml.pth')
        with open(filename) as f:
            pkl.dump(self.model, f)
        
        
class BaseTrainer:
    """
    Base class for all trainers
    """
    def __init__(self, model, criterion, metric_ftns, optimizer, config):
        self.config = config
        self.logger = config.get_logger('trainer', config['trainer']['verbosity'])

        self.model = model
        self.criterion = criterion
        self.metric_ftns = metric_ftns
        self.optimizer = optimizer

        cfg_trainer = config['trainer']
        self.epochs = cfg_trainer['epochs']
        self.save_period = cfg_trainer['save_period']
        self.monitor = cfg_trainer.get('monitor', 'off')

        # configuration to monitor model performance and save best.
        if self.monitor == 'off':
            self.mnt_mode = 'off'
            self.mnt_best = 0
        else:
            self.mnt_mode, self.mnt_metric = self.monitor
            assert self.mnt_mode in ['min', 'max'], "config.yaml에서 trainer.monitor 값은 'min' 또는 'max'이어야 합니다."


            self.mnt_best = inf if self.mnt_mode == 'min' else -inf
            self.early_stop = cfg_trainer.get('early_stop', inf)
            if self.early_stop <= 0:
                self.early_stop = inf

        self.start_epoch = 1

        self.checkpoint_dir = config.save_dir

        # setup visualization writer instance
        self.writer = MLflowWriter(
            exper_name=config.exper_name,
            run_id=config.run_id,
            logger=self.logger
        )

        if config.resume is not None:
            self._resume_checkpoint(config.resume)

    @abstractmethod
    def _train_epoch(self, epoch):
        """ Training logic for an epoch """
        raise NotImplementedError

    def train(self):
        """ Full training logic """
        
        not_improved_count = 0
        for epoch in range(self.start_epoch, self.epochs + 1):
            result = self._train_epoch(epoch)

            # save logged informations into log dict
            log = {'epoch': epoch}
            log.update(result)

            # print logged informations to the screen
            for key, value in log.items():
                self.logger.info('    {:15s}: {}'.format(str(key), value))

            # evaluate model performance according to configured metric, save best checkpoint as model_best
            best = False
            if self.mnt_mode != 'off':
                try:
                    # check whether model performance improved or not, according to specified metric(mnt_metric)
                    improved = (self.mnt_mode == 'min' and log[self.mnt_metric] <= self.mnt_best) or \
                               (self.mnt_mode == 'max' and log[self.mnt_metric] >= self.mnt_best)
                except KeyError:
                    self.logger.warning("Warning: Metric '{}' is not found. "
                                        "Model performance monitoring is disabled.".format(self.mnt_metric))
                    self.mnt_mode = 'off'
                    improved = False

                if improved:
                    self.mnt_best = log[self.mnt_metric]
                    not_improved_count = 0
                    best = True
                else:
                    not_improved_count += 1

                if not_improved_count > self.early_stop:
                    self.logger.info("Validation performance didn\'t improve for {} epochs. "
                                     "Training stops.".format(self.early_stop))
                    break

            if epoch % self.save_period == 0:
                self._save_checkpoint(epoch, save_best=best)

    def _save_checkpoint(self, epoch, save_best=False):
        """ 
        desciption:
            모델을 저장합니다.\n
            save_best가 True일 경우 model_best.pt의 이름으로 한번 더 저장됩니다.
        """
        arch = type(self.model).__name__
        state = {
            'arch': arch,
            'epoch': epoch,
            'state_dict': self.model.state_dict(),
            'optimizer': self.optimizer.state_dict(),
            'monitor_best': self.mnt_best,
            'config': self.config
        }
        
        filename = str(self.checkpoint_dir / 'checkpoint-epoch{}.pth'.format(epoch))
        torch.save(state, filename)
        self.writer.log_artifacts(self.checkpoint_dir)
        self.logger.info("Saving checkpoint: {} ...".format(filename))
        
        if save_best:
            best_path = str(self.checkpoint_dir / 'model_best.pth')
            torch.save(state, best_path)
            self.writer.log_artifacts(self.checkpoint_dir)
            self.writer.pytorch.log_model(self.model, 'model_best')
            self.logger.info("Saving current best: model_best.pth ...")

    def _resume_checkpoint(self, resume_path):
        """ 
        description:
            학습 중지된, 또는 fine tuning할 checkpoint의 학습을 재개합니다.
        """
        resume_path = str(resume_path)
        self.logger.info("Loading checkpoint: {} ...".format(resume_path))
        checkpoint = torch.load(resume_path)
        self.start_epoch = checkpoint['epoch'] + 1
        self.mnt_best = checkpoint['monitor_best']

        # load architecture params from checkpoint.
        if checkpoint['config']['arch'] != self.config['arch']:
            self.logger.warning("Warning: 재개하려는 Model Architecture가 이전 학습 시 사용한 Model Architecture과 다릅니다.")

        self.model.load_state_dict(checkpoint['state_dict'])

        # load optimizer state from checkpoint only when optimizer type is not changed.
        if checkpoint['config']['optimizer']['type'] != self.config['optimizer']['type']:
            self.logger.warning("Warning: 재개하려는 optimizer type이 이전에 사용한 optimizer의 type과 다릅니다.")

        else:
            self.optimizer.load_state_dict(checkpoint['optimizer'])

        self.logger.info("Checkpoint load가 완료되었습니다. epoch {} 부터 재개합니다.".format(self.start_epoch))
